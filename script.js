let peer;
const video = document.getElementById('video');
const out = document.getElementById('out');
const input = document.getElementById('in');

document.getElementById('share-screen').onclick = async () => {
  const stream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: true });

  peer = new SimplePeer({ initiator: true, trickle: false, stream });

  peer.on('signal', data => {
    out.value = JSON.stringify(data);
  });

  peer.on('connect', () => {
    console.log('üü¢ –ü–∏—Ä–∏–Ω–≥–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  });
};

document.getElementById('start-viewer').onclick = () => {
  peer = new SimplePeer({ initiator: false, trickle: false });

  peer.on('signal', data => {
    out.value = JSON.stringify(data);
  });

  peer.on('stream', stream => {
    video.srcObject = stream;
  });

  peer.on('connect', () => {
    console.log('üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å—Ç—Ä–∏–º–µ—Ä—É');
  });
};

document.getElementById('connect').onclick = () => {
  const signal = JSON.parse(input.value);
  peer.signal(signal);
};

video.srcObject = stream;
video.autoplay = true;
video.muted = false;
video.play().catch(err => {
  console.warn("üé¨ –í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:", err);
});

const audioTracks = stream.getAudioTracks();
if (audioTracks.length === 0) {
  alert("üîá –ê—É–¥–∏–æ –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å, –≤—ã–±—Ä–∞–ª –ª–∏ —Ç—ã '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ –∑–≤—É–∫–æ–º'");
} else {
  console.log("üé§ –ó–∞—Ö–≤–∞—á–µ–Ω—ã –∞—É–¥–∏–æ—Ç—Ä–µ–∫–∏:", audioTracks);
}
